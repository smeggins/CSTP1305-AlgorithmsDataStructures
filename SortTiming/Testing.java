import java.time.Duration;
import java.time.Instant;
import java.util.*;

import static java.lang.Thread.sleep;


public class Testing {

    public static void main(String args[]) {
        // ******************************
        // ** Timing Search Algorithms **
        // ******************************

        // create an array of size 100000 * i
        Integer[] arr = new Integer[1000000];
        // fill it with numbers 0, 1, 2, 3, .. etc
        for (int j = 0; j < arr.length; j++) {
            arr[j] = j;
        }

        int sumLinearTime = 0;
        int sumBinaryTime = 0;
        int sumMergeTime = 0;
        int sumHeapTime = 0;
        int sumSelectionSortTime = 0;
        int sumInsertionSortTime =-0 ;

        Instant start;
        Instant finish;

        long elapsedTime;

// //        #The input size n can range from hundred thousand to a million,
// //        #in increments of fifty thousand
//         // Let us sort 100 arrays
//         for (int i = 100000; i <= 10000000; i = i + 50000) {
// //             #We do 100 trials for each value of n
// //            System.out.println(i);
//             for (int j = 0; j <= 1000; j = j + 1) {
//                 // Randomly, pick a key to find
//                 Random rand = new Random();
//                 int randomNum = rand.nextInt(arr.length);
//                 // Time the execution
// //              Date current = new Date();
//                 start = Instant.now();
//                 assert (Algorithms.linear_search(arr, randomNum) != -1);
//                 finish = Instant.now();
//                 elapsedTime = Duration.between(start, finish).toNanos();//.toNanos();; // In NanoSeconds
//                 sumLinearTime += elapsedTime;

//                 start = Instant.now();
//                 assert (Algorithms.binary_search(arr, randomNum) != -1);
//                 finish = Instant.now();
//                 elapsedTime = Duration.between(start, finish).toNanos();//.toNanos();; // In NanoSeconds
//                 sumBinaryTime += elapsedTime;


//             }
//         }
//         // ******************************
//         // ** Result Summary           **
//         // ******************************
//         System.out.println("Linear Search Total Time: " + sumLinearTime + " - Binary Search Total Time: " + sumBinaryTime);




        // ******************************
        // ** Timing Sorting Algorithms **
        // ******************************

        // for REPETITIONS times, shuffle and sort the array
        int REPETITIONS = 500;
        int ARRAY_SIZE_INCREMENT_FACTOR = 100;
        int ARRAY_INITIAL_SIZE = 15000;

       System.out.println("Merge Sort Data points:");
       for (int i = 0 ; i < REPETITIONS; i++){
           arr = new Integer[ARRAY_INITIAL_SIZE + (i * ARRAY_SIZE_INCREMENT_FACTOR)];
           // fill it with numbers 0, 1, 2, 3, .. etc
           for (int j = 0; j < arr.length; j++) {
               arr[j] = j;
           }

           // Shuffle the array
           List<Integer> intList = Arrays.asList(arr);
           Collections.shuffle(intList);
           intList.toArray(arr);

           // Testing Merge Sort
           start = Instant.now();
           Integer []tmpArr= new Integer[arr.length];
           Algorithms.mergesort(arr, tmpArr, 0, arr.length -1);
           finish = Instant.now();
           elapsedTime = Duration.between(start, finish).toNanos();//.toNanos();; // In NanoSeconds
           System.out.print(elapsedTime + ", ");
           sumMergeTime += elapsedTime;
       }


       System.out.println("\nHeap Sort Data points:");
       for (int i = 0 ; i < REPETITIONS; i++) {
           arr = new Integer[ARRAY_INITIAL_SIZE + (i * ARRAY_SIZE_INCREMENT_FACTOR)];
           // fill it with numbers 0, 1, 2, 3, .. etc
           for (int j = 0; j < arr.length; j++) {
               arr[j] = j;
           }

           // Shuffle the array
           List<Integer> intList = Arrays.asList(arr);
           Collections.shuffle(intList);
           intList.toArray(arr);

           // for 100 times, shuffle and HeapSort the array
           start = Instant.now();
           Heap obj = new Heap(arr);
           obj.heapSort();
           finish = Instant.now();
           elapsedTime = Duration.between(start, finish).toNanos();//.toNanos();; // In NanoSeconds
           System.out.print(elapsedTime + ", ");
           sumHeapTime += elapsedTime;
       }
       // ******************************
       // ** Result Summary           **
       // ******************************
       System.out.println("\nMergeSort Total Time: " + sumMergeTime + " - HeapSort Total Time: " + sumHeapTime);

//
        System.out.println("Selection Sort Data points:");
        for (int i = 0 ; i < REPETITIONS; i++) {
            arr = new Integer[ARRAY_INITIAL_SIZE+ (i * ARRAY_SIZE_INCREMENT_FACTOR)];
            // fill it with numbers 0, 1, 2, 3, .. etc
            for (int j = 0; j < arr.length; j++) {
                arr[j] = j;
            }

            // for 100 times, shuffle and HeapSort the array
            // Shuffle the array
            List<Integer> intList = Arrays.asList(arr);
            Collections.shuffle(intList);
            intList.toArray(arr);

            start = Instant.now();
            Algorithms.selectionSort(arr);
            finish = Instant.now();
            elapsedTime = Duration.between(start, finish).toNanos();//.toNanos();; // In NanoSeconds
            System.out.print(elapsedTime + ", ");
            sumSelectionSortTime += elapsedTime;

        }
//
       System.out.println("\nInsertion Sort Data points:");
       for (int i = 0 ; i < REPETITIONS; i++) {
           arr = new Integer[ARRAY_INITIAL_SIZE + (i * ARRAY_SIZE_INCREMENT_FACTOR)];
           // fill it with numbers 0, 1, 2, 3, .. etc
           for (int j = 0; j < arr.length; j++) {
               arr[j] = j;
           }

           // for 100 times, shuffle and HeapSort the array
           // Shuffle the array
           List<Integer> intList = Arrays.asList(arr);
           Collections.shuffle(intList);
           intList.toArray(arr);

           start = Instant.now();
           Algorithms.insertionSort(arr);
           finish = Instant.now();
           elapsedTime = Duration.between(start, finish).toNanos();//.toNanos();; // In NanoSeconds
           System.out.print(elapsedTime + ", ");
           sumInsertionSortTime += elapsedTime;

       }
       // ******************************
       // ** Result Summary           **
       // ******************************
       System.out.println("\nSelectionSort Total Time: " + sumSelectionSortTime + " - InsertionSort Total Time: " + sumInsertionSortTime );

    //    Integer[] arr1 = new Integer[]{4463900, 3968000, 4463900, 2976400, 1981400, 1983800, 1984000, 1984100, 1983800, 1983900, 1487600, 1984100, 1487900, 1983900, 1984100, 1984000, 1487700, 1984000, 1829300, 1983900, 2012600, 1983800, 1983800, 1984200, 1984200, 1983400, 2479500, 2235500, 1984500, 1983700, 1984000, 2480300, 1983800, 1983700, 1984100, 2479400, 2479900, 2479100, 2479900, 1984000, 2507000, 2453000, 2013400, 2475800, 2476500, 2478000, 2479700, 2479900, 2479600, 1983800, 2479700, 2479900, 2479600, 2479700, 2479900, 2480000, 2480000, 2479200, 2980000, 2445900, 2479500, 2479900, 2480100, 2480000, 2477900, 2945300, 2507500, 2713400, 2976000, 2480000, 2480400, 3006800, 2975600, 2479900, 2975800, 2479900, 2975800, 2975900, 2479900, 2975700, 2976500, 2975100, 2999700, 2976200, 3000600, 2969800, 2975300, 2952800, 2999900, 2975600, 2976000, 2976100, 2976000, 2975900, 3471900, 2975900, 2975800, 2976000, 2975900, 3472000, 3003700, 2976500, 3471300, 2936700, 3003800, 3469500, 3472000, 3471000, 3468200, 3500500, 2980300, 3474800, 3471800, 3472000, 3472300, 3472000, 3471800, 3471900, 3966800, 3472300, 3473700, 3470100, 3445500, 3471900, 4430700, 3465400, 3967900, 3937200, 3943600, 3991400, 3463800, 3448600, 3488300, 3465100, 3448700, 3995500, 3968000, 3968000, 3967900, 3472000, 3967600, 3967300, 3495800, 3471700, 3968500, 3967900, 3967900, 3967900, 3968000, 3967900, 3967900, 3996600, 3968700, 4466000, 3963500, 3967900, 3960100, 3968000, 3967900, 3968000, 3968600, 3970000, 3978900, 3943400, 3967900, 3964600, 4439600, 3970000, 4479600, 3968000, 4463900, 4464000, 4463900, 4464100, 4464000, 4464000, 4463900, 4464000, 4464000, 4463900, 4462800, 4635000, 4487100, 4435100, 4456900, 4465300, 4961100, 4459600, 4932300, 4959400, 4466400, 4951600, 4472100, 4449900, 4982300, 4958900, 4961100, 4959600, 4464100, 4959900, 4464100, 4960400, 4932100, 4975400, 4959800, 4463900, 4960200, 4959900, 4959900, 4960000, 4960000, 5455900, 5054700, 4960000, 5455900, 4960000, 5455900, 4960100, 5455900, 4959100, 4959900, 5456000, 4960000, 5456000, 4960000, 5952100, 7439400, 5952300, 4959900, 4960000, 5455900, 4960000, 5456000, 4960100, 4960100, 5456000, 5455900, 5455600, 5455900, 5455600, 5456100, 5455900, 5456000, 5454800, 5455600, 4959700, 5432000, 5453700, 5487900, 5417900, 5924800, 5448700, 5947500, 5444300, 5928100, 5480200, 5444400, 5456700, 5450800, 5975500, 5984100, 5955300, 5449600, 6447900, 5952900, 6476100, 5456000, 5952000, 5456100, 5951900, 5951900, 5952100, 5951300, 5921500, 5951000, 5424500, 5480100, 5951900, 5952000, 5677700, 6447800, 5979800, 6474000, 5946700, 6448300, 5949600, 6473200, 5946900, 6418900, 5951400, 6447900, 5952500, 6477100, 6410300, 5975900, 6450200, 6451600, 6447500, 6448800, 6913800, 5952000, 5922000, 6447900, 5945600, 6418000, 6443000, 6472300, 6447900, 5945800, 6474300, 5922800, 6448000, 6444100, 6936600, 6441800, 6474300, 6442400, 6474700, 6914800, 6449200, 6419900, 6943700, 6912600, 6944100, 6944000, 6448000, 6943900, 6448000, 6943900, 6944000, 6943700, 6417300, 6953200, 7468400, 6938100, 6963500, 6447900, 7466500, 6448300, 7436600, 6448100, 7408900, 7440100, 6944300, 7439800, 6972600, 6967400, 6944000, 7440100, 7439900, 7440000, 7440000, 6944000, 7440100, 7428900, 6910200, 7439700, 7437700, 7440000, 6967300, 7409500, 6944300, 7411400, 7903200, 7930000, 7923400, 6943200, 7434500, 7408200, 7440100, 7936000, 6961200, 7408600, 7439700, 7937200, 7439900, 6944000, 7438900, 7440000, 7440000, 7440200, 7435400, 7936000, 7911100, 7470700, 7935900, 7935700, 8431200, 7936000, 7439900, 7936100, 7440400, 7440000, 8432000, 7938300, 7934300, 8431300, 7936300, 7965300, 7960700, 7935600, 7936000, 7440100, 7936000, 8432000, 7970000, 7936700, 8457300, 7927200, 8431800, 8432300, 8432300, 8456600, 7915500, 8399200, 8432100, 8402500, 8954100, 8927700, 8431900, 8927900, 9424000, 8432200, 8928000, 9920900, 7897400, 8957300, 8923500, 8432300, 8432000, 8395300, 8451200, 8928000, 8958000, 8429700, 8463400, 8431900, 8419800, 8421800, 8455600, 7935900, 8432000, 8431400, 8432100, 8460700, 8692100, 8432100, 8432100, 9424100, 8928000, 8928000, 9424100, 8928000, 9424100, 8928000, 8914900, 8927700, 8923400, 8951900, 8430300, 9424000, 9399100, 8432000, 8928100, 9424000, 9423900, 8928000, 8928100, 8928000, 8928100, 9424300, 9424000, 8927900, 8927900, 9423900, 8900700, 8956900, 9396600, 9452100, 9389500, 8928000, 9919900, 9423800, 9424200, 8926400, 9423600, 9390500, 9424000, 11435600, 9452900, 9418400, 9416900, 9424100, 9920000, 9424000, 9424200, 9424100, 9424400, 8927700, 9919400};
    //    Integer[] arr2 = new Integer[]{2481000, 1517100, 1487500, 991600, 496200, 495900, 495600, 992600, 992300, 495900, 496100, 992600, 991600, 496800, 991400, 496100, 495400, 992300, 495700, 495600, 495400, 991600, 495500, 496300, 496000, 495900, 992900, 991700, 496000, 495900, 496000, 496000, 990900, 495000, 492100, 489800, 991300, 991500, 991500, 991500, 991500, 992800, 964000, 992800, 991600, 991600, 519600, 471700, 495700, 496800, 1018400, 989200, 966500, 521200, 494900, 1018100, 524200, 653600, 967700, 1017600, 461600, 991500, 496000, 991800, 991500, 495900, 991500, 525900, 991500, 991500, 1026400, 990800, 524800, 991600, 992700, 1016300, 496000, 993700, 991500, 496000, 1011600, 987200, 992400, 1026800, 988800, 992500, 991500, 991800, 991800, 991800, 991700, 991900, 991600, 498000, 992300, 990700, 967700, 954600, 993500, 992800, 967400, 990100, 960500, 1002500, 1008600, 992400, 993700, 992400, 991700, 984700, 985400, 524200, 1016000, 1017000, 992200, 992600, 968000, 993200, 1464000, 496000, 991800, 991900, 991900, 989500, 1019900, 991200, 967600, 1016100, 978900, 968400, 992100, 1016100, 992200, 983200, 1005700, 991900, 1494600, 1475200, 1016100, 1016400, 1022900, 1015800, 1501500, 1486700, 1487900, 1487700, 1487700, 991900, 991800, 991700, 991700, 1487700, 1487800, 1460900, 1019800, 1487700, 991700, 991700, 991800, 991900, 1487900, 1487800, 1487900, 991800, 1505800, 1488200, 1002500, 1487400, 1486900, 990600, 963800, 985800, 1614600, 991100, 1494400, 1486100, 1018900, 1037500, 998600, 991800, 1498000, 952500, 1481000, 1489600, 1489200, 1514600, 1489200, 1487800, 1488000, 1487700, 991900, 1164600, 1487800, 1487900, 960300, 1033300, 1487800, 1487600, 1487700, 1488300, 991800, 1488000, 1487800, 1021000, 1006300, 1487900, 1517800, 1522400, 1454100, 1487700, 1487800, 1488200, 1515300, 1514800, 1490800, 991900, 1487800, 991800, 991800, 1487800, 1487800, 1487900, 1487900, 1487900, 1487800, 1487800, 1487800, 991900, 1487800, 1524800, 1487500, 1487900, 1487800, 1487900, 1487800, 1977800, 1486500, 1987000, 1510900, 1494300, 1495200, 992100, 1487900, 1487000, 2017600, 1461900, 1493500, 1456900, 1461700, 1475100, 1983500, 1495500, 1490200, 1496400, 1459400, 1517800, 1513100, 1487800, 1488000, 1487800, 1983800, 1983700, 1984000, 1983700, 1487900, 1487200, 1460700, 1983900, 1487900, 1487800, 1983900, 1487800, 1487800, 1986100, 1949100, 1486000, 1937500, 2015300, 1984400, 1487800, 1487800, 1983200, 1983900, 1479400, 1983700, 1976800, 1984700, 1486600, 1983800, 1984000, 1983800, 1487800, 1983800, 1487800, 1983800, 1983900, 1487700, 1983800, 1487800, 1487500, 1986600, 1944100, 1984100, 1983800, 1983900, 1984100, 1488000, 1974800, 1983200, 1960100, 1983600, 1666200, 1984200, 1983800, 1984000, 1984000, 1983600, 1984000, 1984700, 1984000, 1984100, 1984500, 2480100, 1574600, 1974100, 1982200, 1984400, 1493900, 1984600, 1487800, 1983800, 1983800, 1983900, 1983800, 1954800, 1984700, 1985800, 1973100, 1983900, 2017100, 1983800, 1983900, 2479800, 1983900, 1983800, 1983900, 1488500, 1983900, 1983800, 1983800, 1985800, 1983700, 1487900, 1983900, 2480200, 2020500, 1487800, 1983500, 1950200, 1983900, 1983900, 1984000, 1983700, 1983900, 1984000, 2479800, 1983900, 1983800, 1984000, 2480800, 2479700, 2480100, 1983800, 1956100, 1983800, 1984200, 2479700, 2479800, 1983800, 1983800, 2480200, 1984200, 2448800, 2484000, 1984000, 1983900, 2479800, 2450700, 1988400, 1984000, 2480100, 2480100, 1983900, 2479800, 2479900, 1983800, 1983900, 1983900, 2480000, 1983900, 2450400, 1984000, 1984000, 1983900, 2479900, 2480500, 2015700, 2485600, 2478900, 2480500, 2481000, 2022800, 2451900, 2480100, 2479900, 2479300, 3444200, 2479300, 2480200, 1983600, 1984000, 2479100, 2479800, 2455400, 2481100, 1983300, 2480300, 2480000, 2480600, 2481400, 2480700, 2453900, 1984100, 1983800, 2480000, 2479800, 2479700, 2975300, 2479900, 2479800, 2480000, 2479700, 2975800, 2479900, 2479800, 2479800, 2480000, 2480000, 1983900, 1983700, 2480000, 2479900, 2975800, 2479900, 2975800, 2479900, 2011500, 2484900, 2940800, 2975600, 2479600, 2479900, 2480200, 2480400, 2480200, 2480400, 2480100, 2480000, 2479800, 1983800, 2512600, 2945800, 2509900, 2959700, 2511000, 2479600, 2475400, 2022000, 2478300, 2472900, 2479700, 2509200, 2449900, 2483500, 2976700, 2479900, 2476400, 2952000, 2480100, 2975900, 2451000, 2479800, 2941200, 2975100, 2464400, 2439400, 2510700, 2479900, 2480700, 2975900};
    //    Integer[] arr3 = new Integer[]{102206100, 85840700, 119535000, 86835200, 123532600, 88808300, 120557700, 90769000, 124032200, 126508900, 130472100, 128996700, 135408300, 135434500, 123041200, 141397000, 106143400, 164208900, 111133100, 166159500, 165167100, 136895600, 149324700, 123534300, 158751700, 174096100, 162191500, 191482600, 133427800, 167646400, 159712000, 145846400, 190496300, 174094700, 135415400, 129950900, 134935000, 135932200, 135440900, 136926400, 139874000, 139899800, 145851300, 155772500, 149295700, 148303400, 149819800, 156735300, 155738100, 154776600, 164660700, 164671500, 162688800, 174119100, 165695500, 173104100, 172144200, 177040500, 179055000, 185039900, 188479600, 205374200, 216751900, 195424500, 190463200, 189967900, 198896200, 198896400, 205343700, 211296800, 202367700, 206333800, 219231400, 214300000, 212811700, 215263300, 217248800, 222206400, 234083100, 227167800, 237118300, 239598700, 241084800, 240063500, 247533200, 245544200, 243535300, 267852300, 249513400, 261392800, 260920300, 271802900, 265866700, 263872100, 263409400, 266844400, 267809500, 281756900, 284680600, 289173500, 288154200, 292173200, 287679100, 295646800, 302563200, 302062500, 300079800, 305012400, 319920000, 328352500, 317968900, 337746700, 315951100, 318928000, 328877700, 352656800, 347228200, 343726800, 336813100, 336781400, 341255100, 345184900, 348687900, 352185800, 365055800, 372495800, 377954100, 365056300, 371038400, 367016200, 380440800, 390353200, 384895900, 389820800, 401792400, 392336800, 409729200, 403776400, 403212800, 418619600, 407739300, 426071600, 416136100, 425074500, 431052200, 439442700, 442430100, 441942600, 432015000, 437953200, 441958900, 440949200, 452373300, 454351600, 459326800, 478651900, 465247700, 473679800, 472654800, 489018400, 480158000, 493489900, 493024300, 499966200, 501427400, 508897500, 508398500, 522321100, 517816400, 532699500, 523284100, 538665500, 529225000, 550063400, 571894700, 570426900, 546580100, 560981700, 562931100, 565436600, 568415200, 571423600, 584782400, 569884000, 593244800, 579820900, 590727900, 617576700, 626475800, 633414900, 619002900, 612559600, 616528500, 611100200, 623970300, 624931600, 628956200, 646792600, 631375900, 631439300, 651718500, 671594900, 695880900, 663152400, 706279100, 665139500, 682992700, 673071700, 685961600, 686959800, 685442800, 739037100, 718212200, 699855100, 707820700, 714730500, 711761200, 730142900, 734575900, 731099500, 770281900, 739537400, 771802200, 753949000, 746483200, 752429700, 799552400, 803520100, 764826400, 780671200, 789629600, 808545200, 810493800, 794620700, 801042000, 861052800, 818899300, 830279900, 848159300, 821357500, 876929300, 832264800, 842216300, 850144200, 856565000, 853619800, 869950800, 892308200, 880371100, 877919600, 886381200, 883368000, 884856400, 902218200, 902749100, 946875900, 927029200, 920109300, 952809300, 927519200, 930988100, 970175400, 939393700, 942394100, 980602500, 1012825400, 968694300, 1014017700, 972622600, 987544000, 994456300, 982081400, 1000436200, 989023700, 1044080200, 1043583100, 1048017300, 1058977500, 1029704300, 1028204300, 1037136100, 1072351200, 1051519900, 1058463900, 1065413100, 1075794900, 1076791500, 1072844000, 1087757300, 1135311400, 1097648500, 1110555000, 1132368000, 1133919600, 1168545800, 1152729000, 1162103300, 1132895400, 1224124300, 1172018100, 1248432000, 1209743900, 1275711900, 1289103600, 1239999500, 1261360500, 1224098900, 1319388100, 1234049500, 1374881700, 1212219600, 1239508500, 1233604400, 1262813800, 1285602600, 1226117200, 1253421300, 1252895200, 1266779300, 1258347500, 1268271800, 1301036100, 1342669900, 1321836900, 1337192700, 1307949900, 1359536800, 1331794000, 1313406300, 1353580000, 1343662300, 1396239500, 1392243000, 1404703600, 1413571100, 1422553100, 1396764600, 1431980700, 1434961500, 1438375100, 1398255800, 1431944300, 1451322400, 1441876900, 1441859800, 1482575900, 1487996800, 1458736400, 1500370400, 1524179400, 1518751300, 1497418700, 1477087200, 1504871700, 1481587100, 1533134900, 1503874000, 1566861800, 1566399200, 1563924000, 1554959800, 1560446200, 1578267400, 1527674700, 1544076200, 1600592700, 1610511100, 1585682500, 1610017800, 1691817500, 1636303900, 1632335900, 1640270900, 1647670600, 1690368700, 1689375300, 1750871800, 1692355000, 1682970000, 1662583300, 1680455700, 1678465000, 1679960000, 1668543000, 1731039100, 1729575500, 1765233600, 1743912500, 1761291100, 1764785800, 1730023700, 1739011100, 1741426200, 1802463900, 1787585000, 1759807100, 1825757100, 1800475500, 1843135400, 1825308400, 1836220500, 1888301700, 1857489900, 1901663300, 1871903100, 1885763400, 1895708700, 1857490800, 1923487700, 1929439800, 1898190900, 1935886600, 1942834500, 1964685300, 1980992700, 1931423600, 2003839800, 1986959500, 2019192400, 1986987100, 1956719000, 2014728200, 1994413900, 1999376000, 1998410500, 2049964400, 2044044100, 2012770700, 2121885300, 2028177800, 2027650800, 2084683900, 2091632600, 2100559000, 2101593600, 2106541000, 2134277400, 2068790800, 2136272500, 2158124100, 2169500100, 2172010300, 2187883200, 2204224400, 2170064700, 2195768600, 2174959500, 2199293100, 2205713700, 2242919800, 2259771900, 2257757400, 2279113300, 2260276700, 2247378600, 2259775600, 2356495100, 2341090100, 2316320000, 2302435000, 2307391400, 2370441400, 2385770900, 2396202000, 2357983300, 2363440100, 2432889900, 2420508300, 2451259900, 2397665700, 2497385100, 2483973100, 2402652500, 2502810100, 2421968300, 2488923900, 2487935400, 2562804600, 2438366700, 2507746800, 2545442900, 2493423100, 2463635300, 2467571600, 2487468700, 2480467800, 2488925300, 2507281100, 2543463800, 2547482900, 2617893600, 2654591400, 2641703400, 2610433200, 2595596400, 2607445100, 2687845800, 2596065000, 2705681200, 2682367600};
    //    Integer[] arr4 = new Integer[]{87323400, 83357600, 82363400, 81841200, 84319600, 89313200, 87295500, 86828100, 87822600, 181040000, 91292000, 91759900, 62027300, 80382700, 64479400, 65996600, 96756300, 67951600, 68977300, 70462400, 90796200, 74399900, 73932800, 173599600, 76911400, 77385000, 78396600, 78898900, 81376900, 80880200, 103167200, 85344600, 86800300, 145860300, 99695500, 89806800, 192479900, 91295700, 91295800, 111103900, 92255800, 92724100, 97712800, 96748900, 97736500, 99705000, 100688700, 103135600, 111103800, 105185000, 106180600, 141855500, 109118700, 111630000, 253980000, 113613100, 115101300, 196940600, 121052200, 120527900, 153789300, 120559200, 120551800, 155744200, 124028000, 150287300, 126975000, 130476200, 215267000, 132951900, 135438000, 170127300, 137420800, 160211800, 140891500, 141883500, 187020200, 141908500, 145823200, 155247700, 149272900, 274260000, 150783800, 150813800, 193971100, 154784200, 301601300, 162162800, 164707900, 164712400, 169170000, 215790400, 173133500, 177099400, 168147500, 171119900, 226706600, 186994900, 422131000, 181039100, 178064000, 187487900, 189471900, 245023900, 192944000, 425567900, 192448000, 205849300, 196911900, 204352700, 257423600, 209311600, 253425500, 203390500, 456843900, 210308700, 279749800, 218240600, 220223200, 218237500, 212780700, 279257400, 224192200, 283709000, 228633000, 290679300, 236049700, 431023700, 237060100, 540665800, 240545900, 416644500, 253431800, 309997400, 246487700, 268334900, 250480000, 263896500, 250480100, 255439200, 255935900, 258416000, 260896700, 265855000, 265856000, 267344000, 271282300, 288180800, 280735500, 319949900, 277293700, 379939400, 279707100, 530748500, 296116000, 658193500, 309474600, 521324200, 293109300, 373516400, 315980400, 398287600, 320386400, 397819800, 312953000, 403246000, 326891200, 328848700, 521297100, 320909700, 674553400, 342734700, 414136000, 332315600, 413140300, 342735500, 340287000, 441943700, 339292400, 688441600, 355147200, 448391400, 361560500, 453849800, 397835500, 356652700, 771249500, 382940000, 471694400, 369514500, 474204300, 567424200, 379444500, 491034900, 393821900, 478640000, 419102100, 392336000, 669106400, 398787000, 511347000, 431026500, 397272500, 678570300, 415616300, 541632500, 497984600, 425531500, 524799600, 424575100, 545136400, 812908100, 425042800, 557036700, 434511400, 450889600, 680985500, 455854100, 555020800, 882860300, 463790200, 561471500, 512831400, 473184600, 596220400, 486082900, 469185500, 697872100, 495535300, 623475400, 1031183700, 492039800, 632373100, 1055516600, 498977700, 634383800, 1006354900, 503471000, 656706200, 986573600, 535656300, 672089100, 1071360000, 538131100, 665133700, 1163115200, 539618100, 690927300, 1099097800, 570369800, 729120200, 766317800, 586793400, 605648300, 713714700, 684510000, 566425700, 733091000, 1016332300, 576844100, 725186000, 1094168300, 581837100, 595665800, 751441100, 746974900, 593695500, 755390700, 1259344100, 607592200, 611540000, 774750400, 891283000, 614556600, 780699900, 945344900, 645782300, 627440500, 782685800, 1346208000, 671588500, 634847100, 816416000, 1347630900, 660700500, 653231900, 839262300, 1414097700, 684514200, 693383900, 839728600, 1368959700, 680512600, 684975800, 852654400, 1159123400, 760898600, 691390300, 881362400, 912640700, 1101616000, 699360000, 711760400, 925040600, 1560911700, 744000400, 736829000, 933967500, 933485800, 1245422300, 736560000, 740033200, 932977400, 1161164800, 1007375000, 752929400, 759337400, 952815000, 1276729700, 1051854200, 755901500, 783679800, 978574400, 1015842400, 1341184000, 778719800, 792607800, 1001167700, 1002415800, 1731511100, 913632000, 822405400, 1002967100, 1029199800, 1018817700, 1716684800, 868989900, 847629900, 1050526700, 1077807900, 1074336900, 1793509500, 962737800, 859081400, 842708900, 1054495400, 1073870100, 1525232900, 1553468600, 910136900, 879904600, 1105090900, 1133390000, 1115474100, 1499408000, 1773199500, 1014312300, 934000000, 926001900, 1167617700, 1178497600, 1195332000, 1814826000, 1690368000, 1048507300, 924085000, 953312500, 1216154900, 1189433500, 1227604600, 1202775600, 2014227500, 1710164200, 1122449000, 983069900, 1009874600, 1235564700, 1220127800, 1239014500, 1279184300, 1239008300, 2001852700, 2043490300, 1413629400, 1109085700, 1036611800, 1069399300, 1017327500, 1311452200, 1304995400, 1319360700, 1336225500, 1337718900, 1605059300, 2169502800, 2198762200, 1754811500, 1353585300, 1170560600, 1118506800, 1087724300, 1094181100, 1365025300, 1386782200, 1352123500, 1382322800, 1368994000, 1395714100, 1401196000, 1432912700, 1414622400, 1411090400, 1711198900, 2080193600, 2333142800, 2421939600, 2401660100, 2269194100, 2124337200, 1885272100, 1708194700, 1604560600, 1504339400, 1401695300, 1334736000, 1328780700, 1325340400, 1282160400, 1260336000, 1261359000, 1274689100, 1266287900, 1263834300, 1278191000, 1292553400, 1276204200, 1300017200, 1286657200, 1303488100, 1353554300, 1399247300, 1418574300, 1477115800, 1564387000, 1688851900, 1801441200, 2021694800, 2205711700, 2414527200, 2621360300, 2759772600, 2766224700, 2649180600, 2433871400, 1997420200, 1688383800, 1699329200, 1660579000, 1712192100, 1714669100, 1743936300, 1697335600, 1722112900, 1728064000, 1731007400, 1729101400, 1386316700, 1430464300, 1643748200, 2028637900, 2619409100, 2979936800, 2796477900, 2141697800, 1767247200, 1783120000, 1801968000, 1800504600, 1808394000, 1864960000, 1432477900, 1518751200, 1825770700, 2469550000, 3074222800, 2795924400, 1869915300, 1844153200, 1873393900, 1849582800, 1877341300, 1880900800, 1620951000, 2062359100, 3037588000, 3106423300, 1922991300, 1927488700, 1937872600, 1915579800};
    
    //    System.out.println("\narr1: " + arr1.length);
    //    System.out.println("\narr2: " + arr2.length);
    //    System.out.println("\narr3: " + arr3.length);
    //    System.out.println("\narr4: " + arr4.length);
    }
}